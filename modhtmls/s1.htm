<!DOCTYPE html>
				<html>
				<head>
					<title>1</title>
					<link rel="stylesheet" href="styles.css">
				</head>
				<body>
				<div class="section" id="example">
<h2>15.4.1. Example</h2>
<p>The following code is a Python program that takes a list of integers and
produces either the sum or the max:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">argparse</span>

<span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">'Process some integers.'</span><span class="p">)</span>
<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'integers'</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s">'N'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">nargs</span><span class="o">=</span><span class="s">'+'</span><span class="p">,</span>
                   <span class="n">help</span><span class="o">=</span><span class="s">'an integer for the accumulator'</span><span class="p">)</span>
<span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--sum'</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">'accumulate'</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">'store_const'</span><span class="p">,</span>
                   <span class="n">const</span><span class="o">=</span><span class="nb">sum</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="nb">max</span><span class="p">,</span>
                   <span class="n">help</span><span class="o">=</span><span class="s">'sum the integers (default: find the max)'</span><span class="p">)</span>

<span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
<span class="k">print</span> <span class="n">args</span><span class="o">.</span><span class="n">accumulate</span><span class="p">(</span><span class="n">args</span><span class="o">.</span><span class="n">integers</span><span class="p">)</span>
</pre></div>
</div>
<p>Assuming the Python code above is saved into a file called <tt class="docutils literal"><span class="pre">prog.py</span></tt>, it can
be run at the command line and provides useful help messages:</p>
<div class="highlight-python"><div class="highlight"><pre>$ python prog.py -h
usage: prog.py [-h] [--sum] N [N ...]

Process some integers.

positional arguments:
 N           an integer for the accumulator

optional arguments:
 -h, --help  show this help message and exit
 --sum       sum the integers (default: find the max)
</pre></div>
</div>
<p>When run with the appropriate arguments, it prints either the sum or the max of
the command-line integers:</p>
<div class="highlight-python"><div class="highlight"><pre>$ python prog.py 1 2 3 4
4

$ python prog.py 1 2 3 4 --sum
10
</pre></div>
</div>
<p>If invalid arguments are passed in, it will issue an error:</p>
<div class="highlight-python"><div class="highlight"><pre>$ python prog.py a b c
usage: prog.py [-h] [--sum] N [N ...]
prog.py: error: argument N: invalid int value: 'a'
</pre></div>
</div>
<p>The following sections walk you through this example.</p>
<div class="section" id="creating-a-parser">
<h3>15.4.1.1. Creating a parser</h3>
<p>The first step in using the <a class="reference internal" href="#module-argparse" title="argparse: Command-line option and argument parsing library."><tt class="xref py py-mod docutils literal"><span class="pre">argparse</span></tt></a> is creating an
<a class="reference internal" href="#argparse.ArgumentParser" title="argparse.ArgumentParser"><tt class="xref py py-class docutils literal"><span class="pre">ArgumentParser</span></tt></a> object:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">'Process some integers.'</span><span class="p">)</span>
</pre></div>
</div>
<p>The <a class="reference internal" href="#argparse.ArgumentParser" title="argparse.ArgumentParser"><tt class="xref py py-class docutils literal"><span class="pre">ArgumentParser</span></tt></a> object will hold all the information necessary to
parse the command line into Python data types.</p>
</div>
<div class="section" id="adding-arguments">
<h3>15.4.1.2. Adding arguments</h3>
<p>Filling an <a class="reference internal" href="#argparse.ArgumentParser" title="argparse.ArgumentParser"><tt class="xref py py-class docutils literal"><span class="pre">ArgumentParser</span></tt></a> with information about program arguments is
done by making calls to the <a class="reference internal" href="#argparse.ArgumentParser.add_argument" title="argparse.ArgumentParser.add_argument"><tt class="xref py py-meth docutils literal"><span class="pre">add_argument()</span></tt></a> method.
Generally, these calls tell the <a class="reference internal" href="#argparse.ArgumentParser" title="argparse.ArgumentParser"><tt class="xref py py-class docutils literal"><span class="pre">ArgumentParser</span></tt></a> how to take the strings
on the command line and turn them into objects.  This information is stored and
used when <a class="reference internal" href="#argparse.ArgumentParser.parse_args" title="argparse.ArgumentParser.parse_args"><tt class="xref py py-meth docutils literal"><span class="pre">parse_args()</span></tt></a> is called. For example:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'integers'</span><span class="p">,</span> <span class="n">metavar</span><span class="o">=</span><span class="s">'N'</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">nargs</span><span class="o">=</span><span class="s">'+'</span><span class="p">,</span>
<span class="gp">... </span>                    <span class="n">help</span><span class="o">=</span><span class="s">'an integer for the accumulator'</span><span class="p">)</span>
<span class="gp">&gt;&gt;&gt; </span><span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--sum'</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">'accumulate'</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">'store_const'</span><span class="p">,</span>
<span class="gp">... </span>                    <span class="n">const</span><span class="o">=</span><span class="nb">sum</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="nb">max</span><span class="p">,</span>
<span class="gp">... </span>                    <span class="n">help</span><span class="o">=</span><span class="s">'sum the integers (default: find the max)'</span><span class="p">)</span>
</pre></div>
</div>
<p>Later, calling <a class="reference internal" href="#argparse.ArgumentParser.parse_args" title="argparse.ArgumentParser.parse_args"><tt class="xref py py-meth docutils literal"><span class="pre">parse_args()</span></tt></a> will return an object with
two attributes, <tt class="docutils literal"><span class="pre">integers</span></tt> and <tt class="docutils literal"><span class="pre">accumulate</span></tt>.  The <tt class="docutils literal"><span class="pre">integers</span></tt> attribute
will be a list of one or more ints, and the <tt class="docutils literal"><span class="pre">accumulate</span></tt> attribute will be
either the <a class="reference internal" href="functions.html#sum" title="sum"><tt class="xref py py-func docutils literal"><span class="pre">sum()</span></tt></a> function, if <tt class="docutils literal"><span class="pre">--sum</span></tt> was specified at the command line,
or the <a class="reference internal" href="functions.html#max" title="max"><tt class="xref py py-func docutils literal"><span class="pre">max()</span></tt></a> function if it was not.</p>
</div>
<div class="section" id="parsing-arguments">
<h3>15.4.1.3. Parsing arguments</h3>
<p><a class="reference internal" href="#argparse.ArgumentParser" title="argparse.ArgumentParser"><tt class="xref py py-class docutils literal"><span class="pre">ArgumentParser</span></tt></a> parses arguments through the
<a class="reference internal" href="#argparse.ArgumentParser.parse_args" title="argparse.ArgumentParser.parse_args"><tt class="xref py py-meth docutils literal"><span class="pre">parse_args()</span></tt></a> method.  This will inspect the command line,
convert each argument to the appropriate type and then invoke the appropriate action.
In most cases, this means a simple <a class="reference internal" href="#argparse.Namespace" title="argparse.Namespace"><tt class="xref py py-class docutils literal"><span class="pre">Namespace</span></tt></a> object will be built up from
attributes parsed out of the command line:</p>
<div class="highlight-python"><div class="highlight"><pre><span class="gp">&gt;&gt;&gt; </span><span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">([</span><span class="s">'--sum'</span><span class="p">,</span> <span class="s">'7'</span><span class="p">,</span> <span class="s">'-1'</span><span class="p">,</span> <span class="s">'42'</span><span class="p">])</span>
<span class="go">Namespace(accumulate=&lt;built-in function sum&gt;, integers=[7, -1, 42])</span>
</pre></div>
</div>
<p>In a script, <a class="reference internal" href="#argparse.ArgumentParser.parse_args" title="argparse.ArgumentParser.parse_args"><tt class="xref py py-meth docutils literal"><span class="pre">parse_args()</span></tt></a> will typically be called with no
arguments, and the <a class="reference internal" href="#argparse.ArgumentParser" title="argparse.ArgumentParser"><tt class="xref py py-class docutils literal"><span class="pre">ArgumentParser</span></tt></a> will automatically determine the
command-line arguments from <a class="reference internal" href="sys.html#sys.argv" title="sys.argv"><tt class="xref py py-data docutils literal"><span class="pre">sys.argv</span></tt></a>.</p>
</div>
</div>

				</body>
				</html>