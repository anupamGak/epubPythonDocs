<!DOCTYPE html>
				<html>
				<head>
					<title>6</title>
					<link rel="stylesheet" href="styles.css">
				</head>
				<body>
				<div class="section" id="upgrading-optparse-code">
<span id="argparse-from-optparse"></span><h2>15.4.6. Upgrading optparse code</h2>
<p>Originally, the <a class="reference internal" href="#module-argparse" title="argparse: Command-line option and argument parsing library."><tt class="xref py py-mod docutils literal"><span class="pre">argparse</span></tt></a> module had attempted to maintain compatibility
with <a class="reference internal" href="optparse.html#module-optparse" title="optparse: Command-line option parsing library. (deprecated)"><tt class="xref py py-mod docutils literal"><span class="pre">optparse</span></tt></a>.  However, <a class="reference internal" href="optparse.html#module-optparse" title="optparse: Command-line option parsing library. (deprecated)"><tt class="xref py py-mod docutils literal"><span class="pre">optparse</span></tt></a> was difficult to extend
transparently, particularly with the changes required to support the new
<tt class="docutils literal"><span class="pre">nargs=</span></tt> specifiers and better usage messages.  When most everything in
<a class="reference internal" href="optparse.html#module-optparse" title="optparse: Command-line option parsing library. (deprecated)"><tt class="xref py py-mod docutils literal"><span class="pre">optparse</span></tt></a> had either been copy-pasted over or monkey-patched, it no
longer seemed practical to try to maintain the backwards compatibility.</p>
<p>The <a class="reference internal" href="#module-argparse" title="argparse: Command-line option and argument parsing library."><tt class="xref py py-mod docutils literal"><span class="pre">argparse</span></tt></a> module improves on the standard library <a class="reference internal" href="optparse.html#module-optparse" title="optparse: Command-line option parsing library. (deprecated)"><tt class="xref py py-mod docutils literal"><span class="pre">optparse</span></tt></a>
module in a number of ways including:</p>
<ul class="simple">
<li>Handling positional arguments.</li>
<li>Supporting sub-commands.</li>
<li>Allowing alternative option prefixes like <tt class="docutils literal"><span class="pre">+</span></tt> and <tt class="docutils literal"><span class="pre">/</span></tt>.</li>
<li>Handling zero-or-more and one-or-more style arguments.</li>
<li>Producing more informative usage messages.</li>
<li>Providing a much simpler interface for custom <tt class="docutils literal"><span class="pre">type</span></tt> and <tt class="docutils literal"><span class="pre">action</span></tt>.</li>
</ul>
<p>A partial upgrade path from <a class="reference internal" href="optparse.html#module-optparse" title="optparse: Command-line option parsing library. (deprecated)"><tt class="xref py py-mod docutils literal"><span class="pre">optparse</span></tt></a> to <a class="reference internal" href="#module-argparse" title="argparse: Command-line option and argument parsing library."><tt class="xref py py-mod docutils literal"><span class="pre">argparse</span></tt></a>:</p>
<ul class="simple">
<li>Replace all <a class="reference internal" href="optparse.html#optparse.OptionParser.add_option" title="optparse.OptionParser.add_option"><tt class="xref py py-meth docutils literal"><span class="pre">optparse.OptionParser.add_option()</span></tt></a> calls with
<a class="reference internal" href="#argparse.ArgumentParser.add_argument" title="argparse.ArgumentParser.add_argument"><tt class="xref py py-meth docutils literal"><span class="pre">ArgumentParser.add_argument()</span></tt></a> calls.</li>
<li>Replace <tt class="docutils literal"><span class="pre">(options,</span> <span class="pre">args)</span> <span class="pre">=</span> <span class="pre">parser.parse_args()</span></tt> with <tt class="docutils literal"><span class="pre">args</span> <span class="pre">=</span>
<span class="pre">parser.parse_args()</span></tt> and add additional <a class="reference internal" href="#argparse.ArgumentParser.add_argument" title="argparse.ArgumentParser.add_argument"><tt class="xref py py-meth docutils literal"><span class="pre">ArgumentParser.add_argument()</span></tt></a>
calls for the positional arguments. Keep in mind that what was previously
called <tt class="docutils literal"><span class="pre">options</span></tt>, now in <a class="reference internal" href="#module-argparse" title="argparse: Command-line option and argument parsing library."><tt class="xref py py-mod docutils literal"><span class="pre">argparse</span></tt></a> context is called <tt class="docutils literal"><span class="pre">args</span></tt>.</li>
<li>Replace callback actions and the <tt class="docutils literal"><span class="pre">callback_*</span></tt> keyword arguments with
<tt class="docutils literal"><span class="pre">type</span></tt> or <tt class="docutils literal"><span class="pre">action</span></tt> arguments.</li>
<li>Replace string names for <tt class="docutils literal"><span class="pre">type</span></tt> keyword arguments with the corresponding
type objects (e.g. int, float, complex, etc).</li>
<li>Replace <tt class="xref py py-class docutils literal"><span class="pre">optparse.Values</span></tt> with <a class="reference internal" href="#argparse.Namespace" title="argparse.Namespace"><tt class="xref py py-class docutils literal"><span class="pre">Namespace</span></tt></a> and
<tt class="xref py py-exc docutils literal"><span class="pre">optparse.OptionError</span></tt> and <tt class="xref py py-exc docutils literal"><span class="pre">optparse.OptionValueError</span></tt> with
<tt class="xref py py-exc docutils literal"><span class="pre">ArgumentError</span></tt>.</li>
<li>Replace strings with implicit arguments such as <tt class="docutils literal"><span class="pre">%default</span></tt> or <tt class="docutils literal"><span class="pre">%prog</span></tt> with
the standard Python syntax to use dictionaries to format strings, that is,
<tt class="docutils literal"><span class="pre">%(default)s</span></tt> and <tt class="docutils literal"><span class="pre">%(prog)s</span></tt>.</li>
<li>Replace the OptionParser constructor <tt class="docutils literal"><span class="pre">version</span></tt> argument with a call to
<tt class="docutils literal"><span class="pre">parser.add_argument('--version',</span> <span class="pre">action='version',</span> <span class="pre">version='&lt;the</span> <span class="pre">version&gt;')</span></tt></li>
</ul>
</div>

				</body>
				</html>